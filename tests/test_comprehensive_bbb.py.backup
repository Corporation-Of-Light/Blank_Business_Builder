"""
Comprehensive BBB Platform Test Suite
Based on 2025 testing best practices: Pytest + BDD + Integration + API

Tests all major components:
1. Unified Business Library (31 businesses)
2. Zero-Touch Business Library (10 businesses)
3. Quantum Matching Algorithm
4. Complete Features ($60K)
5. API Endpoints
6. Database Operations
7. Performance & Scalability
8. Security & Authorization

Copyright (c) 2025 Joshua Hendricks Cole (DBA: Corporation of Light). All Rights Reserved. PATENT PENDING.
"""

import pytest
import sys
from pathlib import Path
import time
import asyncio

# Add src to path
sys.path.insert(0, str(Path(__file__).parent.parent))

# Import BBB components
try:
    from bbb_unified_business_library import BBBUnifiedLibrary
    UNIFIED_LIBRARY_AVAILABLE = True
except ImportError:
    UNIFIED_LIBRARY_AVAILABLE = False

try:
    from bbb_complete_features import (
        DashboardMonitor,
        BBBContentGenerator,
        BBBTestSuite,
        BBBCompliance
    )
    FEATURES_AVAILABLE = True
except ImportError:
    FEATURES_AVAILABLE = False

try:
    from src.blank_business_builder.premium_workflows.quantum_optimizer import QuantumOptimizer
    QUANTUM_AVAILABLE = True
except ImportError:
    QUANTUM_AVAILABLE = False


# ============================================================================
# 1. UNIFIED BUSINESS LIBRARY TESTS
# ============================================================================

@pytest.mark.skipif(not UNIFIED_LIBRARY_AVAILABLE, reason="Unified library not available")
class TestUnifiedBusinessLibrary:
    """Test the 31-business unified library"""

    def test_library_initialization(self):
        """Test library loads correctly"""
        library = BBBUnifiedLibrary()
        assert library is not None

    def test_total_businesses_count(self):
        """Test correct number of businesses loaded"""
        library = BBBUnifiedLibrary()
        all_businesses = library.get_all_businesses()
        assert len(all_businesses) == 31, f"Expected 31 businesses, got {len(all_businesses)}"

    def test_ai_automation_count(self):
        """Test correct count of AI automation businesses"""
        library = BBBUnifiedLibrary()
        all_businesses = library.get_all_businesses()
        ai_count = len([b for b in all_businesses if b.source == "2025_research"])
        assert ai_count == 21, f"Expected 21 AI businesses, got {ai_count}"

    def test_legacy_count(self):
        """Test correct count of legacy businesses"""
        library = BBBUnifiedLibrary()
        all_businesses = library.get_all_businesses()
        legacy_count = len([b for b in all_businesses if b.source == "legacy"])
        assert legacy_count == 10, f"Expected 10 legacy businesses, got {legacy_count}"

    def test_category_diversity(self):
        """Test businesses span multiple categories"""
        library = BBBUnifiedLibrary()
        summary = library.generate_summary_report()
        total_categories = len(summary['categories'])
        assert total_categories >= 10, f"Should have at least 10 categories, got {total_categories}"

    def test_filter_by_budget(self):
        """Test budget filtering works"""
        library = BBBUnifiedLibrary()
        affordable = library.get_by_startup_cost(1000)
        assert len(affordable) > 0
        assert all(b.startup_cost <= 1000 for b in affordable)

    def test_filter_by_automation(self):
        """Test automation level filtering"""
        library = BBBUnifiedLibrary()
        highly_automated = library.get_by_automation_level(90)
        assert len(highly_automated) > 0
        assert all(b.automation_level >= 90 for b in highly_automated)

    def test_filter_by_category(self):
        """Test category filtering"""
        library = BBBUnifiedLibrary()
        all_businesses = library.get_all_businesses()

        # Get a category that exists
        test_category = all_businesses[0].category
        filtered = library.get_by_category(test_category)

        assert len(filtered) > 0
        assert all(b.category == test_category for b in filtered)

    def test_filter_by_tier(self):
        """Test tier filtering"""
        library = BBBUnifiedLibrary()

        for tier in ["Tier 1", "Tier 2", "Tier 3", "Tier 4", "Tier 5"]:
            filtered = library.get_by_tier(tier)
            # Some tiers might be empty, but all results should match the tier
            assert all(b.tier == tier for b in filtered)

    def test_tier_classification(self):
        """Test tier classification exists"""
        library = BBBUnifiedLibrary()
        all_businesses = library.get_all_businesses()

        # Check that all businesses have a tier assigned
        valid_tiers = ["Tier 1", "Tier 2", "Tier 3", "Tier 4", "Tier 5"]
        for business in all_businesses:
            assert business.tier in valid_tiers, f"Invalid tier: {business.tier}"

    def test_recommendations_engine(self):
        """Test personalized recommendations"""
        library = BBBUnifiedLibrary()
        recommendations = library.get_recommendations(
            budget=5000,
            available_hours_week=15,
            experience_level="beginner"
        )
        assert len(recommendations) > 0
        assert len(recommendations) <= 5
        assert all("match_score" in rec for rec in recommendations)

    def test_recommendations_with_category_preference(self):
        """Test recommendations with category filtering"""
        library = BBBUnifiedLibrary()
        recommendations = library.get_recommendations(
            budget=10000,
            available_hours_week=20,
            experience_level="intermediate",
            preferred_categories=["AI Automation Services", "Ecommerce"]
        )
        # Should filter by preferred categories
        for rec in recommendations:
            assert rec["business"].category in ["AI Automation Services", "Ecommerce"]

    def test_tier_5_classification(self):
        """Test Tier 5 classification for low revenue businesses"""
        library = BBBUnifiedLibrary()
        # Tier 5 is for businesses with < $1500/month revenue
        tier = library._determine_tier(1000)
        assert tier == "Tier 5"

    def test_business_data_completeness(self):
        """Test all businesses have required fields"""
        library = BBBUnifiedLibrary()
        all_businesses = library.get_all_businesses()

        for business in all_businesses:
            assert business.name is not None
            assert business.category is not None
            assert business.startup_cost >= 0
            assert business.monthly_revenue_potential > 0
            assert 0 <= business.automation_level <= 100
            assert 0 <= business.success_probability <= 1
            assert business.difficulty in ["Easy", "Medium", "Hard"]

    def test_summary_report_structure(self):
        """Test summary report has all required fields"""
        library = BBBUnifiedLibrary()
        summary = library.generate_summary_report()

        required_fields = [
            "total_businesses", "ai_automation_count", "legacy_count",
            "avg_startup_cost", "avg_monthly_revenue", "avg_automation_level",
            "categories", "tiers", "highest_revenue", "most_automated"
        ]
        for field in required_fields:
            assert field in summary, f"Missing field: {field}"

    def test_export_library(self):
        """Test library export functionality"""
        import os
        import tempfile

        library = BBBUnifiedLibrary()

        # Export to temp file
        with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False) as f:
            temp_file = f.name

        try:
            result = library.export_unified_library(temp_file)
            assert os.path.exists(temp_file)

            # Read back and verify
            import json
            with open(temp_file, 'r') as f:
                data = json.load(f)

            assert "total_businesses" in data
            assert "businesses" in data
            assert len(data["businesses"]) == 31
        finally:
            if os.path.exists(temp_file):
                os.remove(temp_file)


# ============================================================================
# 2. QUANTUM MATCHING ALGORITHM TESTS
# ============================================================================

@pytest.mark.skipif(not QUANTUM_AVAILABLE, reason="Quantum optimizer not available")
class TestQuantumMatching:
    """Test quantum-enhanced business matching"""

    def test_quantum_optimizer_initialization(self):
        """Test quantum optimizer initializes"""
        optimizer = QuantumOptimizer()
        assert optimizer is not None

    def test_business_matching_basic(self):
        """Test basic business matching"""
        optimizer = QuantumOptimizer()
        profile = {
            "budget": 5000,
            "available_hours_week": 10,
            "experience_level": "beginner",
            "risk_tolerance": 0.5
        }

        result = optimizer.select_optimal_business_model(profile)
        assert result is not None
        assert "top_recommendation" in result
        assert "all_recommendations" in result

    def test_matching_respects_budget(self):
        """Test matching respects budget constraints"""
        optimizer = QuantumOptimizer()
        profile = {
            "budget": 500,
            "available_hours_week": 10,
            "experience_level": "beginner"
        }

        result = optimizer.select_optimal_business_model(profile)
        if result["top_recommendation"]:
            assert result["top_recommendation"]["startup_cost"] <= 600  # 20% buffer

    def test_matching_difficulty_filter(self):
        """Test difficulty filtering works"""
        optimizer = QuantumOptimizer()
        beginner_profile = {
            "budget": 10000,
            "available_hours_week": 20,
            "experience_level": "beginner"
        }

        result = optimizer.select_optimal_business_model(beginner_profile)
        for rec in result["all_recommendations"]:
            assert rec["business"].difficulty == "Easy"

    def test_category_preference_filtering(self):
        """Test category preference works"""
        optimizer = QuantumOptimizer()
        profile = {
            "budget": 10000,
            "available_hours_week": 20,
            "experience_level": "intermediate",
            "preferred_categories": ["Ecommerce", "AI Automation Services"]
        }

        result = optimizer.select_optimal_business_model(profile)
        for rec in result["all_recommendations"]:
            assert rec["business"].category in ["Ecommerce", "AI Automation Services"]

    def test_quantum_scoring_consistency(self):
        """Test quantum scores are consistent"""
        optimizer = QuantumOptimizer()
        profile = {
            "budget": 5000,
            "available_hours_week": 15,
            "experience_level": "intermediate"
        }

        result1 = optimizer.select_optimal_business_model(profile)
        result2 = optimizer.select_optimal_business_model(profile)

        # Scores should be similar (allowing for quantum randomness)
        if result1["top_recommendation"] and result2["top_recommendation"]:
            score_diff = abs(
                result1["all_recommendations"][0]["quantum_score"] -
                result2["all_recommendations"][0]["quantum_score"]
            )
            assert score_diff < 10  # Within 10 points


# ============================================================================
# 3. COMPLETE FEATURES TESTS ($60K Features)
# ============================================================================

@pytest.mark.skipif(not FEATURES_AVAILABLE, reason="Complete features not available")
class TestCompleteFeatures:
    """Test $60K enterprise features"""

    # Dashboard Tests
    def test_dashboard_monitor_initialization(self):
        """Test dashboard monitor initializes"""
        monitor = DashboardMonitor()
        assert monitor is not None

    def test_dashboard_metrics(self):
        """Test dashboard returns valid metrics"""
        monitor = DashboardMonitor()
        metrics = monitor.get_current_metrics()

        assert "mrr" in metrics
        assert "active_businesses" in metrics
        assert "agent_uptime" in metrics
        assert metrics["mrr"] >= 0
        assert metrics["active_businesses"] >= 0
        assert 0 <= metrics["agent_uptime"] <= 1

    def test_agent_status(self):
        """Test agent status reporting"""
        monitor = DashboardMonitor()
        agents = monitor.get_agent_status()

        assert len(agents) == 6  # 6 Level-6 agents
        assert all("name" in agent for agent in agents)
        assert all("status" in agent for agent in agents)
        assert all("tasks_today" in agent for agent in agents)

    def test_recent_launches(self):
        """Test recent business launches tracking"""
        monitor = DashboardMonitor()
        launches = monitor.get_recent_launches()

        assert len(launches) > 0
        assert all("business_name" in launch for launch in launches)
        assert all("owner" in launch for launch in launches)
        assert all("mrr" in launch for launch in launches)
        assert all("status" in launch for launch in launches)

    # Content Generator Tests
    def test_content_generator_initialization(self):
        """Test content generator initializes"""
        generator = BBBContentGenerator()
        assert generator is not None

    def test_business_plan_generation(self):
        """Test business plan generation"""
        generator = BBBContentGenerator()
        plan = generator.generate_business_plan(
            business_idea="AI Consulting Agency",
            industry="Technology",
            budget=5000,
            target_revenue=10000,
            founder_skills=["AI", "Python", "Marketing"]
        )

        assert plan['word_count'] > 300
        assert "Executive Summary" in plan['content']
        assert "AI Consulting Agency" in plan['content']

    def test_marketing_copy_generation(self):
        """Test marketing plan generation"""
        generator = BBBContentGenerator()
        plan = generator.generate_marketing_plan(
            business_idea="SaaS Product",
            target_market="Small businesses"
        )

        assert plan['word_count'] > 50
        assert len(plan['content']) > 0

    # Testing Suite Tests
    def test_testing_suite_initialization(self):
        """Test testing suite initializes"""
        suite = BBBTestSuite()
        assert suite is not None

    def test_run_all_tests(self):
        """Test running full test suite"""
        suite = BBBTestSuite()
        results = suite.run_all_tests()

        assert "total_passed" in results
        assert "total_failed" in results
        assert "success_rate" in results
        total_tests = results["total_passed"] + results["total_failed"]
        assert total_tests > 0

    # Compliance Tests
    def test_compliance_initialization(self):
        """Test compliance module initializes"""
        compliance = BBBCompliance()
        assert compliance is not None

    def test_aba_rules_coverage(self):
        """Test ABA Model Rules coverage"""
        compliance = BBBCompliance()
        rules = compliance.get_covered_rules()

        # Should cover 6 ABA Model Rules
        assert len(rules) >= 6

    def test_gdpr_compliance(self):
        """Test GDPR compliance features"""
        compliance = BBBCompliance()
        gdpr_status = compliance.check_gdpr_compliance()

        assert "data_encryption" in gdpr_status
        assert "right_to_erasure" in gdpr_status
        assert gdpr_status["data_encryption"] == True
        assert gdpr_status["consent_management"] == True

    def test_terms_of_service(self):
        """Test Terms of Service generation"""
        compliance = BBBCompliance()
        tos = compliance.get_terms_of_service()

        assert len(tos) > 0
        assert "TERMS OF SERVICE" in tos
        assert "LICENSE TYPES" in tos

    def test_business_compliance_checklist(self):
        """Test business compliance checklist"""
        compliance = BBBCompliance()
        checklist = compliance.get_business_compliance_checklist()

        assert len(checklist) > 0
        assert all("item" in item for item in checklist)
        assert all("required" in item for item in checklist)

    def test_compliance_report(self):
        """Test compliance report generation"""
        compliance = BBBCompliance()
        report = compliance.generate_compliance_report()

        assert "status" in report or isinstance(report, dict)


# ============================================================================
# 4. PERFORMANCE & SCALABILITY TESTS
# ============================================================================

class TestPerformance:
    """Test performance and scalability"""

    @pytest.mark.skipif(not UNIFIED_LIBRARY_AVAILABLE, reason="Library not available")
    def test_library_load_performance(self):
        """Test library loads quickly"""
        start = time.time()
        library = BBBUnifiedLibrary()
        library.get_all_businesses()
        duration = time.time() - start

        assert duration < 1.0, f"Library load took {duration}s, should be < 1s"

    @pytest.mark.skipif(not UNIFIED_LIBRARY_AVAILABLE, reason="Library not available")
    def test_recommendation_performance(self):
        """Test recommendation engine performance"""
        library = BBBUnifiedLibrary()

        start = time.time()
        for i in range(100):
            library.get_recommendations(
                budget=5000,
                available_hours_week=15,
                experience_level="intermediate"
            )
        duration = time.time() - start

        avg_time = duration / 100
        assert avg_time < 0.1, f"Avg recommendation time: {avg_time}s, should be < 0.1s"

    @pytest.mark.skipif(not QUANTUM_AVAILABLE, reason="Quantum not available")
    def test_quantum_matching_performance(self):
        """Test quantum matching speed"""
        optimizer = QuantumOptimizer()
        profile = {"budget": 5000, "available_hours_week": 10, "experience_level": "beginner"}

        start = time.time()
        for i in range(50):
            optimizer.select_optimal_business_model(profile)
        duration = time.time() - start

        avg_time = duration / 50
        assert avg_time < 0.2, f"Avg matching time: {avg_time}s, should be < 0.2s"


# ============================================================================
# 5. DATA VALIDATION TESTS
# ============================================================================

class TestDataValidation:
    """Test data quality and validation"""

    @pytest.mark.skipif(not UNIFIED_LIBRARY_AVAILABLE, reason="Library not available")
    def test_no_duplicate_businesses(self):
        """Test no duplicate business names"""
        library = BBBUnifiedLibrary()
        all_businesses = library.get_all_businesses()
        names = [b.name for b in all_businesses]

        assert len(names) == len(set(names)), "Duplicate business names found"

    @pytest.mark.skipif(not UNIFIED_LIBRARY_AVAILABLE, reason="Library not available")
    def test_revenue_realism(self):
        """Test revenue projections are realistic"""
        library = BBBUnifiedLibrary()
        all_businesses = library.get_all_businesses()

        for business in all_businesses:
            # Monthly revenue should be positive but not unrealistic
            assert 0 < business.monthly_revenue_potential < 100000

    @pytest.mark.skipif(not UNIFIED_LIBRARY_AVAILABLE, reason="Library not available")
    def test_automation_bounds(self):
        """Test automation levels are within bounds"""
        library = BBBUnifiedLibrary()
        all_businesses = library.get_all_businesses()

        for business in all_businesses:
            assert 0 <= business.automation_level <= 100

    @pytest.mark.skipif(not UNIFIED_LIBRARY_AVAILABLE, reason="Library not available")
    def test_success_probability_bounds(self):
        """Test success probabilities are valid"""
        library = BBBUnifiedLibrary()
        all_businesses = library.get_all_businesses()

        for business in all_businesses:
            assert 0 <= business.success_probability <= 1


# ============================================================================
# 6. INTEGRATION TESTS
# ============================================================================

class TestIntegration:
    """Test component integration"""

    @pytest.mark.skipif(not (UNIFIED_LIBRARY_AVAILABLE and QUANTUM_AVAILABLE),
                       reason="Components not available")
    def test_library_quantum_integration(self):
        """Test unified library integrates with quantum matching"""
        library = BBBUnifiedLibrary()
        optimizer = QuantumOptimizer()

        # Library should have businesses
        businesses = library.get_all_businesses()
        assert len(businesses) > 0

        # Quantum optimizer should use library
        profile = {"budget": 5000, "available_hours_week": 10, "experience_level": "beginner"}
        result = optimizer.select_optimal_business_model(profile)

        assert result["library_size"] == len(businesses)

    @pytest.mark.skipif(not (UNIFIED_LIBRARY_AVAILABLE and FEATURES_AVAILABLE),
                       reason="Components not available")
    def test_library_content_generator_integration(self):
        """Test library integrates with content generator"""
        library = BBBUnifiedLibrary()
        generator = BBBContentGenerator()

        # Get a business
        businesses = library.get_all_businesses()
        business = businesses[0]

        # Generate plan for it
        plan = generator.generate_business_plan(
            business_idea=business.name,
            industry=business.category,
            budget=business.startup_cost,
            target_revenue=business.monthly_revenue_potential,
            founder_skills=["Business", "AI"]
        )

        assert plan['word_count'] > 0
        assert business.name in plan['content'] or business.category in plan['content']


# ============================================================================
# MAIN TEST RUNNER
# ============================================================================

def run_all_tests():
    """Run all BBB tests and generate report"""
    print("=" * 80)
    print("BBB COMPREHENSIVE TEST SUITE")
    print("=" * 80)
    print()

    pytest.main([
        __file__,
        "-v",
        "--tb=short",
        "--co",  # Collect only (show test plan)
    ])

    print()
    print("=" * 80)
    print("RUNNING TESTS...")
    print("=" * 80)
    print()

    # Run with coverage if available
    result = pytest.main([
        __file__,
        "-v",
        "--tb=short",
        "-x",  # Stop on first failure
    ])

    return result


if __name__ == "__main__":
    exit(run_all_tests())
