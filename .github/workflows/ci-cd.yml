# Copyright (c) 2025 Joshua Hendricks Cole (DBA: Corporation of Light). All Rights Reserved. PATENT PENDING.
#
# CI/CD Pipeline for Better Business Builder

name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'
  DOCKER_IMAGE: bbb/api
  K8S_NAMESPACE: bbb-production

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_USER: testuser
          POSTGRES_DB: bbb_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio pytest-mock coverage

    - name: Run linting
      run: |
        pip install flake8 black isort
        flake8 src/ tests/ --max-line-length=120 --exclude=__pycache__
        black --check src/ tests/
        isort --check-only src/ tests/

    - name: Run tests with coverage
      env:
        DATABASE_URL: postgresql://testuser:testpassword@localhost:5432/bbb_test
        JWT_SECRET_KEY: test-secret-key
        STRIPE_SECRET_KEY: sk_test_fake
        OPENAI_API_KEY: sk-test-fake
      run: |
        pytest tests/ \
          --cov=src/blank_business_builder \
          --cov-report=xml \
          --cov-report=term \
          --cov-report=html \
          --verbose

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true

    - name: Check test coverage threshold
      run: |
        coverage report --fail-under=80

    - name: Archive coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: htmlcov/

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install bandit safety

    - name: Run Bandit (security linter)
      run: |
        bandit -r src/ -ll

    - name: Check dependencies for vulnerabilities
      run: |
        safety check --json

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  build:
    name: Build Docker Image
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_IMAGE }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=semver,pattern={{version}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Scan Docker image for vulnerabilities
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-image-results.sarif'

    - name: Upload image scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-image-results.sarif'

  deploy-staging:
    name: Deploy to Staging
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.betterbusinessbuilder.com

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure kubectl
      uses: azure/setup-kubectl@v3

    - name: Set up kubeconfig
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > $HOME/.kube/config

    - name: Deploy to staging
      run: |
        kubectl set image deployment/bbb-api \
          api=${{ env.DOCKER_IMAGE }}:develop-${{ github.sha }} \
          -n bbb-staging

        kubectl rollout status deployment/bbb-api -n bbb-staging --timeout=5m

    - name: Run smoke tests
      run: |
        curl -f https://staging.betterbusinessbuilder.com/health || exit 1

  deploy-production:
    name: Deploy to Production
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://betterbusinessbuilder.com

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure kubectl
      uses: azure/setup-kubectl@v3

    - name: Set up kubeconfig
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > $HOME/.kube/config

    - name: Deploy to production
      run: |
        kubectl set image deployment/bbb-api \
          api=${{ env.DOCKER_IMAGE }}:main-${{ github.sha }} \
          -n ${{ env.K8S_NAMESPACE }}

        kubectl rollout status deployment/bbb-api -n ${{ env.K8S_NAMESPACE }} --timeout=10m

    - name: Run smoke tests
      run: |
        curl -f https://api.betterbusinessbuilder.com/health || exit 1

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v1.0.${{ github.run_number }}
        release_name: Release v1.0.${{ github.run_number }}
        body: |
          Automated release from commit ${{ github.sha }}

          Changes: ${{ github.event.head_commit.message }}
        draft: false
        prerelease: false

    - name: Notify deployment success
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: 'Production deployment successful! :rocket:'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()

  performance-test:
    name: Performance Testing
    needs: deploy-staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Locust
      run: |
        pip install locust

    - name: Run load tests
      run: |
        locust -f tests/load_test.py \
          --host=https://staging.betterbusinessbuilder.com \
          --users=100 \
          --spawn-rate=10 \
          --run-time=2m \
          --headless \
          --html=locust_report.html

    - name: Upload performance report
      uses: actions/upload-artifact@v4
      with:
        name: performance-report
        path: locust_report.html
